// finalServer.js - Version finale du serveur pour r√©soudre les probl√®mes

// Gestion des erreurs non attrap√©es - doit √™tre en premier
process.on('uncaughtException', (error) => {
  console.error('‚ùå ERREUR NON G√âR√âE:', error.message);
  console.error('Stack trace:', error.stack);
  // Ne pas quitter le processus pour permettre au serveur de continuer
});

process.on('unhandledRejection', (reason) => {
  console.error('‚ùå PROMESSE REJET√âE NON G√âR√âE:', reason);
  // Ne pas quitter le processus pour permettre au serveur de continuer
});

// Modules n√©cessaires
const express = require('express');
const http = require('http');
const cors = require('cors');
const bodyParser = require('body-parser');
const { Pool } = require('pg');
require('dotenv').config();

// Cr√©ation de l'application Express
const app = express();

// Configuration de base
app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Route de base pour tester
app.get('/', (req, res) => {
  res.send('üéØ API Assigm√© en ligne');
});

// Connexion √† la base de donn√©es avec des options robustes
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  connectionTimeoutMillis: 10000,
  max: 20,
  idleTimeoutMillis: 30000,
  allowExitOnIdle: false
});

// Middleware de logging
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
  next();
});

// Cr√©ation du serveur HTTP manuellement pour plus de contr√¥le
const server = http.createServer(app);

// Tester la connexion √† la DB avant de configurer les routes
pool.query('SELECT NOW()')
  .then(result => {
    console.log('üü¢ Connexion DB r√©ussie √† :', result.rows[0].now);
    
    try {
      // Import des routes
      const authRoutes = require('./routes/auth.routes');
      const annoncesRoutes = require('./routes/annonces.routes');
      const categoriesRoutes = require('./routes/categories.routes');
      const favorisRoutes = require('./routes/favoris.routes');
      const conversationsRoutes = require('./routes/conversations.routes');

      // Montage des routes sous /api
      app.use('/api/auth', authRoutes);
      app.use('/api/annonces', annoncesRoutes);
      app.use('/api/categories', categoriesRoutes);
      app.use('/api/favoris', favorisRoutes);
      app.use('/api/conversations', conversationsRoutes);
      
      console.log('‚úÖ Routes charg√©es avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur lors du chargement des routes:', error);
    }

    // Middleware de gestion d'erreurs - apr√®s les routes
    app.use((err, req, res, next) => {
      console.error('üî• Erreur globale:', err);
      
      if (err && (err.type === 'entity.parse.failed' || err instanceof SyntaxError)) {
        return res.status(400).json({ 
          message: 'Requ√™te malform√©e ‚ùå', 
          details: err.message 
        });
      }
      
      return res.status(500).json({ 
        message: 'Erreur serveur ‚ùå', 
        details: err?.message || 'Erreur inconnue' 
      });
    });

    // Route 404 pour les routes non trouv√©es
    app.use((req, res) => {
      res.status(404).json({ message: 'Route non trouv√©e ‚ùå' });
    });

    // D√©marrer le serveur
    const PORT = process.env.PORT || 5001;
    
    console.log('Tentative de d√©marrage du serveur sur le port:', PORT);
    
    // Configurer les gestionnaires d'√©v√©nements du serveur
    server.on('error', (error) => {
      console.error('‚ùå Erreur de d√©marrage du serveur:', error);
      
      if (error.code === 'EADDRINUSE') {
        console.error(`Le port ${PORT} est d√©j√† utilis√© par un autre processus!`);
      }
    });
    
    // √âcouter sur 127.0.0.1 au lieu de 0.0.0.0 pour √©viter les probl√®mes de r√©seau
    server.listen(PORT, '127.0.0.1', () => {
      console.log(`‚úÖ Serveur lanc√© sur http://localhost:${PORT}`);
    });
    
    // G√©rer les signaux de fermeture propre
    process.on('SIGINT', () => {
      console.log('Signal SIGINT re√ßu. Fermeture du serveur...');
      server.close(() => {
        console.log('Serveur ferm√©');
        pool.end(() => {
          console.log('Connexion DB ferm√©e');
          process.exit(0);
        });
      });
    });
    
    process.on('SIGTERM', () => {
      console.log('Signal SIGTERM re√ßu. Fermeture du serveur...');
      server.close(() => {
        console.log('Serveur ferm√©');
        pool.end(() => {
          console.log('Connexion DB ferm√©e');
          process.exit(0);
        });
      });
    });
  })
  .catch(err => {
    console.error('‚ùå Erreur DB :', err);
    process.exit(1);
  });

module.exports = app;
