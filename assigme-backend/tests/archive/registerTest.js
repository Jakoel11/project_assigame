// registerTest.js - Test d'inscription avec un client HTTP natif

const http = require('http');

console.log('üß™ Test d\'inscription avec HTTP natif...');

// Donn√©es de l'utilisateur
const userData = {
  full_name: 'Test User',
  email: `test${Date.now()}@test.com`,
  phone: '90909090',
  password: 'password123'
};

console.log('Donn√©es utilisateur:', userData);

// Convertir les donn√©es en JSON
const postData = JSON.stringify(userData);

// Options de la requ√™te
const options = {
  hostname: '127.0.0.1',
  port: 5001,
  path: '/api/auth/register',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': Buffer.byteLength(postData)
  }
};

console.log('Envoi de la requ√™te √† http://localhost:5001/api/auth/register');

// Cr√©er la requ√™te
const req = http.request(options, (res) => {
  console.log(`Status: ${res.statusCode}`);
  console.log(`Headers: ${JSON.stringify(res.headers)}`);
  
  let data = '';
  
  // √âv√©nement pour chaque morceau de donn√©es re√ßu
  res.on('data', (chunk) => {
    data += chunk;
  });
  
  // √âv√©nement quand la r√©ponse est compl√®te
  res.on('end', () => {
    console.log('R√©ponse compl√®te:');
    try {
      const jsonResponse = JSON.parse(data);
      console.log(JSON.stringify(jsonResponse, null, 2));
    } catch (e) {
      console.log('R√©ponse non-JSON:', data);
    }
    console.log('Test termin√©!');
    process.exit(0); // Quitter proprement
  });
});

// G√©rer les erreurs de requ√™te
req.on('error', (e) => {
  console.error(`‚ùå Erreur de requ√™te: ${e.message}`);
  process.exit(1);
});

// Envoyer les donn√©es
req.write(postData);

// Terminer la requ√™te
req.end();

// D√©finir un timeout pour terminer le script si aucune r√©ponse n'est re√ßue
setTimeout(() => {
  console.error('‚ùå Timeout - Aucune r√©ponse re√ßue apr√®s 10 secondes');
  process.exit(1);
}, 10000);
